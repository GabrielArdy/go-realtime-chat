# Build stage
FROM golang:1.21-alpine3.18 AS builder

# Install git and build dependencies
RUN apk update && \
    apk add --no-cache git gcc musl-dev ca-certificates tzdata && \
    rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -o realtime-server \
    cmd/server/main.go

# Final stage - using distroless
FROM gcr.io/distroless/static-debian11:nonroot

# Copy binary from builder stage
COPY --from=builder /app/realtime-server /realtime-server

# Copy configuration files
COPY --from=builder /app/configs /configs

# Copy timezone data and certificates from builder
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Set working directory
WORKDIR /

# Expose port
EXPOSE 8080

# Run the application
ENTRYPOINT ["/realtime-server"]
